{"version":3,"file":"primitives.dev.js","sources":["../lib/utils.js","../lib/box.js","../lib/cylinder.js","../lib/cone.js","../lib/plane.js","../lib/quad.js","../lib/sphere.js","../lib/torus.js","../index.js"],"sourcesContent":["/**\n * @param {Array} indices\n */\nexport function wireframe(indices) {\n  const offsets = [[0, 1], [1, 2], [2, 0]];\n  let lines = [];\n  let lineIDs = {};\n\n  for (let i = 0; i < indices.length; i += 3) {\n    for (let k = 0; k < 3; ++k) {\n      let i1 = indices[i + offsets[k][0]];\n      let i2 = indices[i + offsets[k][1]];\n\n      // check if we already have the line in our lines\n      let id = (i1 > i2) ? ((i2 << 16) | i1) : ((i1 << 16) | i2);\n      if (lineIDs[id] === undefined) {\n        lineIDs[id] = 0;\n        lines.push(i1, i2);\n      }\n    }\n  }\n\n  return lines;\n}\n\n/**\n * @param {Array} positions\n * @param {Array} normals\n * @param {Number} length\n */\nexport function normals(positions, normals, length = 1) {\n  let verts = new Array(2 * positions.length);\n\n  for (let i = 0; i < positions.length/3; ++i) {\n    let i3 = 3*i;\n    let i6 = 6*i;\n\n    // line start\n    verts[i6 + 0] = positions[i3 + 0];\n    verts[i6 + 1] = positions[i3 + 1];\n    verts[i6 + 2] = positions[i3 + 2];\n\n    // line end\n    verts[i6 + 3] = positions[i3 + 0] + normals[i3 + 0] * length;\n    verts[i6 + 4] = positions[i3 + 1] + normals[i3 + 1] * length;\n    verts[i6 + 5] = positions[i3 + 2] + normals[i3 + 2] * length;\n  }\n\n  return verts;\n}\n","'use strict';\n\nimport { vec3 } from 'vmath';\n\nlet temp1 = vec3.create();\nlet temp2 = vec3.create();\nlet temp3 = vec3.create();\nlet r = vec3.create();\nlet c0 = vec3.create();\nlet c1 = vec3.create();\nlet c2 = vec3.create();\nlet c3 = vec3.create();\nlet c4 = vec3.create();\nlet c5 = vec3.create();\nlet c6 = vec3.create();\nlet c7 = vec3.create();\n\n/**\n * @param {Number} width\n * @param {Number} height\n * @param {Number} length\n * @param {Object} opts\n * @param {Number} opts.widthSegments\n * @param {Number} opts.heightSegments\n * @param {Number} opts.lengthSegments\n */\nexport default function (width, height, length, opts = {}) {\n  let ws = opts.widthSegments !== undefined ? opts.widthSegments : 1;\n  let hs = opts.heightSegments !== undefined ? opts.heightSegments : 1;\n  let ls = opts.lengthSegments !== undefined ? opts.lengthSegments : 1;\n\n  let hw = width * 0.5;\n  let hh = height * 0.5;\n  let hl = length * 0.5;\n\n  let corners = [\n    vec3.set(c0, -hw, -hh,  hl),\n    vec3.set(c1,  hw, -hh,  hl),\n    vec3.set(c2,  hw,  hh,  hl),\n    vec3.set(c3, -hw,  hh,  hl),\n    vec3.set(c4,  hw, -hh, -hl),\n    vec3.set(c5, -hw, -hh, -hl),\n    vec3.set(c6, -hw,  hh, -hl),\n    vec3.set(c7,  hw,  hh, -hl),\n  ];\n\n  let faceAxes = [\n    [ 0, 1, 3 ], // FRONT\n    [ 4, 5, 7 ], // BACK\n    [ 3, 2, 6 ], // TOP\n    [ 1, 0, 4 ], // BOTTOM\n    [ 1, 4, 2 ], // RIGHT\n    [ 5, 0, 6 ]  // LEFT\n  ];\n\n  let faceNormals = [\n    [  0,  0,  1 ], // FRONT\n    [  0,  0, -1 ], // BACK\n    [  0,  1,  0 ], // TOP\n    [  0, -1,  0 ], // BOTTOM\n    [  1,  0,  0 ], // RIGHT\n    [ -1,  0,  0 ]  // LEFT\n  ];\n\n  let positions = [];\n  let normals = [];\n  let uvs = [];\n  let indices = [];\n\n  function _buildPlane (side, uSegments, vSegments) {\n    let u, v;\n    let ix, iy;\n    let offset = positions.length / 3;\n    let faceAxe = faceAxes[side];\n    let faceNormal = faceNormals[side];\n\n    for (iy = 0; iy <= vSegments; iy++) {\n      for (ix = 0; ix <= uSegments; ix++) {\n        u = ix / uSegments;\n        v = iy / vSegments;\n\n        vec3.lerp(temp1, corners[faceAxe[0]], corners[faceAxe[1]], u);\n        vec3.lerp(temp2, corners[faceAxe[0]], corners[faceAxe[2]], v);\n        vec3.sub(temp3, temp2, corners[faceAxe[0]]);\n        vec3.add(r, temp1, temp3);\n\n        positions.push(r.x, r.y, r.z);\n        normals.push(faceNormal[0], faceNormal[1], faceNormal[2]);\n        uvs.push(u, v);\n\n        if ((ix < uSegments) && (iy < vSegments)) {\n          let useg1 = uSegments + 1;\n          let a = ix + iy * useg1;\n          let b = ix + (iy + 1) * useg1;\n          let c = (ix + 1) + (iy + 1) * useg1;\n          let d = (ix + 1) + iy * useg1;\n\n          indices.push(offset + a, offset + d, offset + b);\n          indices.push(offset + d, offset + c, offset + b);\n        }\n      }\n    }\n  }\n\n  _buildPlane(0, ws, hs); // FRONT\n  _buildPlane(4, ls, hs); // RIGHT\n  _buildPlane(1, ws, hs); // BACK\n  _buildPlane(5, ls, hs); // LEFT\n  _buildPlane(3, ws, ls); // BOTTOM\n  _buildPlane(2, ws, ls); // TOP\n\n  return {\n    positions,\n    normals,\n    uvs,\n    indices,\n  };\n}\n","'use strict';\n\nimport { vec3 } from 'vmath';\n\nlet temp1 = vec3.create();\nlet temp2 = vec3.create();\n\n/**\n * @param {Number} radiusTop\n * @param {Number} radiusBottom\n * @param {Number} height\n * @param {Object} opts\n * @param {Number} opts.radialSegments\n * @param {Number} opts.heightSegments\n * @param {Boolean} opts.capped\n * @param {Number} opts.arc\n */\nexport default function (radiusTop = 0.5, radiusBottom = 0.5, height = 1, opts = {}) {\n  let halfHeight = height * 0.5;\n  let radialSegments = opts.radialSegments || 8;\n  let heightSegments = opts.heightSegments || 1;\n  let capped = opts.capped !== undefined ? opts.capped : true;\n  let arc = opts.arc || 2.0 * Math.PI;\n\n  let cntCap = 0;\n  if (!capped) {\n    if (radiusTop > 0) {\n      cntCap++;\n    }\n\n    if (radiusBottom > 0) {\n      cntCap++;\n    }\n  }\n\n  // calculate vertex count\n  let vertCount = (radialSegments + 1) * (heightSegments + 1);\n  if (capped) {\n    vertCount += ((radialSegments + 1) * cntCap) + (radialSegments * cntCap);\n  }\n\n  // calculate index count\n  let indexCount = radialSegments * heightSegments * 2 * 3;\n  if (capped) {\n    indexCount += radialSegments * cntCap * 3;\n  }\n\n  let indices = new Array(indexCount);\n  let positions = new Array(vertCount * 3);\n  let normals = new Array(vertCount * 3);\n  let uvs = new Array(vertCount * 2);\n\n  let index = 0;\n  let indexOffset = 0;\n\n  generateTorso();\n\n  if (capped) {\n    if (radiusBottom > 0) {\n      generateCap(false);\n    }\n\n    if (radiusTop > 0) {\n      generateCap(true);\n    }\n  }\n\n  return {\n    positions,\n    normals,\n    uvs,\n    indices,\n  };\n\n  // =======================\n  // internal fucntions\n  // =======================\n\n  function generateTorso() {\n    let indexArray = [];\n\n    // this will be used to calculate the normal\n    let slope = (radiusTop - radiusBottom) / height;\n\n    // generate positions, normals and uvs\n    for (let y = 0; y <= heightSegments; y++) {\n      let indexRow = [];\n      let v = y / heightSegments;\n\n      // calculate the radius of the current row\n      let radius = v * (radiusTop - radiusBottom) + radiusBottom;\n\n      for (let x = 0; x <= radialSegments; ++x) {\n        let u = x / radialSegments;\n        let theta = u * arc;\n\n        let sinTheta = Math.sin(theta);\n        let cosTheta = Math.cos(theta);\n\n        // vertex\n        positions[3 * index] = radius * sinTheta;\n        positions[3 * index + 1] = v * height - halfHeight;\n        positions[3 * index + 2] = radius * cosTheta;\n\n        // normal\n        vec3.normalize(temp1, vec3.set(temp2, sinTheta, -slope, cosTheta));\n        normals[3 * index] = temp1.x;\n        normals[3 * index + 1] = temp1.y;\n        normals[3 * index + 2] = temp1.z;\n\n        // uv\n        uvs[2 * index] = u;\n        uvs[2 * index + 1] = v;\n\n        // save index of vertex in respective row\n        indexRow.push(index);\n\n        // increase index\n        ++index;\n      }\n\n      // now save positions of the row in our index array\n      indexArray.push(indexRow);\n    }\n\n    // generate indices\n    for (let y = 0; y < heightSegments; ++y) {\n      for (let x = 0; x < radialSegments; ++x) {\n        // we use the index array to access the correct indices\n        let i1 = indexArray[y][x];\n        let i2 = indexArray[y + 1][x];\n        let i3 = indexArray[y + 1][x + 1];\n        let i4 = indexArray[y][x + 1];\n\n        // face one\n        indices[indexOffset] = i1; ++indexOffset;\n        indices[indexOffset] = i4; ++indexOffset;\n        indices[indexOffset] = i2; ++indexOffset;\n\n        // face two\n        indices[indexOffset] = i4; ++indexOffset;\n        indices[indexOffset] = i3; ++indexOffset;\n        indices[indexOffset] = i2; ++indexOffset;\n      }\n    }\n  }\n\n  function generateCap(top) {\n    let centerIndexStart, centerIndexEnd;\n\n    let radius = top ? radiusTop : radiusBottom;\n    let sign = top ? 1 : - 1;\n\n    // save the index of the first center vertex\n    centerIndexStart = index;\n\n    // first we generate the center vertex data of the cap.\n    // because the geometry needs one set of uvs per face,\n    // we must generate a center vertex per face/segment\n\n    for (let x = 1; x <= radialSegments; ++x) {\n      // vertex\n      positions[3 * index] = 0;\n      positions[3 * index + 1] = halfHeight * sign;\n      positions[3 * index + 2] = 0;\n\n      // normal\n      normals[3 * index] = 0;\n      normals[3 * index + 1] = sign;\n      normals[3 * index + 2] = 0;\n\n      // uv\n      uvs[2 * index] = 0.5;\n      uvs[2 * index + 1] = 0.5;\n\n      // increase index\n      ++index;\n    }\n\n    // save the index of the last center vertex\n    centerIndexEnd = index;\n\n    // now we generate the surrounding positions, normals and uvs\n\n    for (let x = 0; x <= radialSegments; ++x) {\n      let u = x / radialSegments;\n      let theta = u * arc;\n\n      let cosTheta = Math.cos(theta);\n      let sinTheta = Math.sin(theta);\n\n      // vertex\n      positions[3 * index] = radius * sinTheta;\n      positions[3 * index + 1] = halfHeight * sign;\n      positions[3 * index + 2] = radius * cosTheta;\n\n      // normal\n      normals[3 * index] = 0;\n      normals[3 * index + 1] = sign;\n      normals[3 * index + 2] = 0;\n\n      // uv\n      uvs[2 * index] = 0.5 - (cosTheta * 0.5);\n      uvs[2 * index + 1] = (sinTheta * 0.5 * sign) + 0.5;\n\n      // increase index\n      ++index;\n    }\n\n    // generate indices\n\n    for (let x = 0; x < radialSegments; ++x) {\n      let c = centerIndexStart + x;\n      let i = centerIndexEnd + x;\n\n      if (top) {\n        // face top\n        indices[indexOffset] = i + 1; ++indexOffset;\n        indices[indexOffset] = c;     ++indexOffset;\n        indices[indexOffset] = i;     ++indexOffset;\n      } else {\n        // face bottom\n        indices[indexOffset] = c;     ++indexOffset;\n        indices[indexOffset] = i + 1; ++indexOffset;\n        indices[indexOffset] = i;     ++indexOffset;\n      }\n    }\n  }\n}\n","'use strict';\n\nimport cylinder from './cylinder';\n\n/**\n * @param {Number} radius\n * @param {Number} height\n * @param {Object} opts\n * @param {Number} opts.radialSegments\n * @param {Number} opts.heightSegments\n * @param {Boolean} opts.capped\n * @param {Number} opts.arc\n */\nexport default function (radius = 0.5, height = 1, opts = {}) {\n  return cylinder(0, radius, height, opts);\n}","'use strict';\n\nimport { vec3 } from 'vmath';\n\nlet temp1 = vec3.create();\nlet temp2 = vec3.create();\nlet temp3 = vec3.create();\nlet r = vec3.create();\nlet c00 = vec3.create();\nlet c10 = vec3.create();\nlet c01 = vec3.create();\n\n/**\n * @param {Number} width\n * @param {Number} length\n * @param {Object} opts\n * @param {Number} opts.widthSegments\n * @param {Number} opts.lengthSegments\n */\nexport default function (width, length, opts = {}) {\n  let uSegments = opts.widthSegments !== undefined ? opts.widthSegments : 5;\n  let vSegments = opts.lengthSegments !== undefined ? opts.lengthSegments : 5;\n\n  let hw = width * 0.5;\n  let hl = length * 0.5;\n\n  let positions = [];\n  let normals = [];\n  let uvs = [];\n  let indices = [];\n\n  vec3.set(c00, -hw, 0,  hl);\n  vec3.set(c10,  hw, 0,  hl);\n  vec3.set(c01, -hw, 0, -hl);\n\n  for (let y = 0; y <= vSegments; y++) {\n    for (let x = 0; x <= uSegments; x++) {\n      let u = x / uSegments;\n      let v = y / vSegments;\n\n      vec3.lerp(temp1, c00, c10, u);\n      vec3.lerp(temp2, c00, c01, v);\n      vec3.sub(temp3, temp2, c00);\n      vec3.add(r, temp1, temp3);\n\n      positions.push(r.x, r.y, r.z);\n      normals.push(0, 1, 0);\n      uvs.push(u, v);\n\n      if ((x < uSegments) && (y < vSegments)) {\n        let useg1 = uSegments + 1;\n        let a = x + y * useg1;\n        let b = x + (y + 1) * useg1;\n        let c = (x + 1) + (y + 1) * useg1;\n        let d = (x + 1) + y * useg1;\n\n        indices.push(a, d, b);\n        indices.push(d, c, b);\n      }\n    }\n  }\n\n  return {\n    positions,\n    normals,\n    uvs,\n    indices,\n  };\n}\n","'use strict';\n\nlet positions = [\n  -0.5, -0.5, 0, // bottom-left\n  -0.5,  0.5, 0, // top-left\n   0.5,  0.5, 0, // top-right\n   0.5, -0.5, 0, // bottom-right\n];\n\nlet normals = [\n  0, 0, 1,\n  0, 0, 1,\n  0, 0, 1,\n  0, 0, 1,\n];\n\nlet uvs = [\n  0, 0,\n  0, 1,\n  1, 1,\n  1, 0,\n];\n\nlet indices = [\n  0, 3, 1,\n  3, 2, 1\n];\n\nexport default function () {\n  return {\n    positions: positions,\n    indices: indices,\n    normals: normals,\n    uvs: uvs,\n  };\n}\n","'use strict';\n\n/**\n * @param {Number} radius\n * @param {Object} opts\n * @param {Number} opts.segments\n */\nexport default function (radius = 1, opts = {}) {\n  let segments = opts.segments !== undefined ? opts.segments : 16;\n\n  // lat === latitude\n  // lon === longitude\n\n  let positions = [];\n  let normals = [];\n  let uvs = [];\n  let indices = [];\n\n  for (let lat = 0; lat <= segments; ++lat) {\n    let theta = lat * Math.PI / segments;\n    let sinTheta = Math.sin(theta);\n    let cosTheta = -Math.cos(theta);\n\n    for (let lon = 0; lon <= segments; ++lon) {\n      let phi = lon * 2 * Math.PI / segments - Math.PI / 2.0;\n      let sinPhi = Math.sin(phi);\n      let cosPhi = Math.cos(phi);\n\n      let x = sinPhi * sinTheta;\n      let y = cosTheta;\n      let z = cosPhi * sinTheta;\n      let u = lon / segments;\n      let v = lat / segments;\n\n      positions.push(x * radius, y * radius, z * radius);\n      normals.push(x, y, z);\n      uvs.push(u, v);\n\n\n      if ((lat < segments) && (lon < segments)) {\n        let seg1 = segments + 1;\n        let a = seg1 * lat + lon;\n        let b = seg1 * (lat + 1) + lon;\n        let c = seg1 * (lat + 1) + lon + 1;\n        let d = seg1 * lat + lon + 1;\n\n        indices.push(a, d, b);\n        indices.push(d, c, b);\n      }\n    }\n  }\n\n  return {\n    positions: positions,\n    indices: indices,\n    normals: normals,\n    uvs: uvs\n  };\n}","'use strict';\n\n/**\n * @param {Number} radius\n * @param {Number} tube\n * @param {Object} opts\n * @param {Number} opts.radialSegments\n * @param {Number} opts.tubularSegments\n * @param {Number} opts.arc\n */\nexport default function (radius = 0.5, tube = 0.2, opts = {}) {\n  let radialSegments = opts.radialSegments || 30;\n  let tubularSegments = opts.tubularSegments || 20;\n  let arc = opts.arc || 2.0 * Math.PI;\n\n  let positions = [];\n  let normals = [];\n  let uvs = [];\n  let indices = [];\n\n  for (let j = 0; j <= radialSegments; j++) {\n    for (let i = 0; i <= tubularSegments; i++) {\n      let u = i / tubularSegments;\n      let v = j / radialSegments;\n\n      let u1 = u * arc;\n      let v1 = v * Math.PI * 2;\n\n      // vertex\n      let x = (radius + tube * Math.cos(v1)) * Math.sin(u1);\n      let y = tube * Math.sin(v1);\n      let z = (radius + tube * Math.cos(v1)) * Math.cos(u1);\n\n      // this vector is used to calculate the normal\n      let nx = Math.sin(u1) * Math.cos(v1);\n      let ny = Math.sin(v1);\n      let nz = Math.cos(u1) * Math.cos(v1);\n\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      uvs.push(u, v);\n\n      if ((i < tubularSegments) && (j < radialSegments)) {\n        let seg1 = tubularSegments + 1;\n        let a = seg1 * j + i;\n        let b = seg1 * (j + 1) + i;\n        let c = seg1 * (j + 1) + i + 1;\n        let d = seg1 * j + i + 1;\n\n        indices.push(a, d, b);\n        indices.push(d, c, b);\n      }\n    }\n  }\n\n  return {\n    positions,\n    normals,\n    uvs,\n    indices,\n  };\n}","import { wireframe, normals } from './lib/utils';\nimport box from './lib/box';\nimport cone from './lib/cone';\nimport cylinder from './lib/cylinder';\nimport plane from './lib/plane';\nimport quad from './lib/quad';\nimport sphere from './lib/sphere';\nimport torus from './lib/torus';\n\nexport default {\n  // utils\n  wireframe,\n  normals,\n\n  // shapes\n  box,\n  cone,\n  cylinder,\n  plane,\n  quad,\n  sphere,\n  torus,\n};"],"names":["vec3","temp1","temp2","temp3","r","normals"],"mappings":"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"}